1) Example with @OneToMany Mapping

In a @OneToMany relationship, 
the @JoinColumn annotation is used on the many side of the relationship to specify the foreign key column:

Example with @OneToMany Mapping
In a @OneToMany relationship, the @JoinColumn annotation is used on the many side of the relationship 
to specify the foreign key column:

@Entity
public class Email {
@ManyToOne(fetch = FetchType.LAZY)
@JoinColumn(name = "employee_id")
private Employee employee;
}

Here, the Email entity has a foreign key column named employee_id that references the primary key of the Employee entity

Multiple Join Columns
In some cases, you may need to create multiple join columns. This can be achieved using the @JoinColumns annotation:

@Entity
public class Office {
@ManyToOne(fetch = FetchType.LAZY)
@JoinColumns({
@JoinColumn(name = "ADDR_ID", referencedColumnName = "ID"),
@JoinColumn(name = "ADDR_ZIP", referencedColumnName = "ZIP")
})
private Address address;
}

This example creates two foreign keys pointing to the ID and ZIP columns in the Address entity

The @JoinColumn annotation is a powerful tool for defining relationships between entities in JPA. 
It allows you to specify the foreign key column used to join entities and provides several optional 
elements for customization. Understanding how 
to use @JoinColumn effectively can help you create robust and efficient database mappings in your Java applications

===============================
Many To Many

The inverseJoinColumns attribute is used in JPA (Java Persistence API) when 
defining a many-to-many relationship using the @JoinTable annotation. 
It specifies the foreign key column(s) in the join table that reference the inverse 
side of the relationship (the other entity).

Explanation
In a many-to-many relationship, a join table is used to link two entities.
The @JoinTable annotation defines the join table, and it has two key attributes:
joinColumns: Specifies the foreign key column(s) that reference the owning entity.
inverseJoinColumns: Specifies the foreign key column(s) that reference the inverse (or non-owning) entity.
Example
Hereâ€™s an example of how inverseJoinColumns is used:

Java

Copy code
@Entity
public class Student {
    @Id
    private Long id;
    private String name;

    @ManyToMany
    @JoinTable(
        name = "student_course",
        joinColumns = @JoinColumn(name = "student_id"), // Foreign key for Student
        inverseJoinColumns = @JoinColumn(name = "course_id") // Foreign key for Course
    )
    private List<Course> courses;
}

@Entity
public class Course {
    @Id
    private Long id;
    private String title;

    @ManyToMany(mappedBy = "courses")
    private List<Student> students;
}
Key Points
joinColumns: Refers to the owning side (e.g., Student in the example).
inverseJoinColumns: Refers to the inverse side (e.g., Course in the example).
This setup ensures that the join table (student_course) has two columns:
student_id (foreign key to Student).
course_id (foreign key to Course).
This structure allows JPA to manage the many-to-many relationship effectively.


