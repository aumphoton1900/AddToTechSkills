
Types of Statements in JDBC
Last Updated : 15 Sep, 2025
In Java, the Statement interface in JDBC (Java Database Connectivity) is used to create and execute SQL 
queries in Java applications. JDBC provides three types of statements to interact with the database:

Statement -> For executing static SQL queries.
PreparedStatement -> For executing parameterized queries.
CallableStatement -> For executing stored procedures.

https://stackoverflow.com/questions/17089301/working-with-resultsets-in-java


2.
ResultSet.TYPE_SCROLL_INSENSITIVE is a constant defined in the java.sql.ResultSet interface in JDBC 
(Java Database Connectivity). 
It represents a specific type of ResultSet object with the following characteristics:
Scrollable: Unlike TYPE_FORWARD_ONLY ResultSets, TYPE_SCROLL_INSENSITIVE allows for navigation both forward and 
backward through the rows of the result set. This includes moving to specific rows, 
moving relative to the current position, and checking for the first or last row.
Insensitive to Database Changes: This type of ResultSet is insensitive 
to changes made to the underlying data in the database after the ResultSet has been created. 
If another transaction modifies or deletes rows that are part of the ResultSet, 
these changes will not be reflected in the TYPE_SCROLL_INSENSITIVE object. 
The ResultSet essentially holds a snapshot of the data at the time it was generated.

3.
TYPE_SCROLL_INSENSITIVE result sets are scrollable but do not reflect changes 
made to the underlying database while the result set is open, whereas TYPE_SCROLL_SENSITIVE 
result sets are scrollable and do reflect those changes. The key difference 
is the sensitivity to database modifications: insensitive types provide a static snapshot of data, 
while sensitive types offer a dynamic view of the live database. 
Here's a breakdown of the characteristics of each:
ResultSet.TYPE_SCROLL_INSENSITIVE
Scrollability: The cursor can move forward and backward through the rows.

Sensitivity: It is insensitive to changes in the underlying database that occur after the result set was created.
Data View: Provides a snapshot of the data as it was when the query was processed.
Use Case: Useful for efficient navigation through query results where real-time updates to the data are not necessary. 
ResultSet.TYPE_SCROLL_SENSITIVE 
Scrollability: The cursor can move forward and backward through the rows.
Sensitivity: It is sensitive to changes made to the database while the result set is open.
Data View: The data in the result set directly reflects the changes (like inserts, updates, or deletes) 
occurring in the database.
Use Case: Ideal when you need to view live updates made by other transactions or statements in the same database. 

In Summary
Choose TYPE_SCROLL_INSENSITIVE for a fixed view of data, which can be more efficient as it doesn't require constant 
checking for database changes.

Choose TYPE_SCROLL_SENSITIVE when you need your result set to stay synchronized with the live database, 
showing all changes as they happen. 

4.
What is the difference between execute(), executeQuery() and executeUpdate() methods in JDBC?
https://www.tutorialspoint.com/what-is-the-difference-between-execute-executequery-and-executeupdate-methods-in-jdbc

(a) The execute() method: This method is used to execute SQL DDL statements, 
it returns a boolean value specifying weather the ResultSet object can be retrieved.

    Statement stmt = con.createStatement();
     //Executing the statement
      String createTable = "CREATE TABLE Employee( "
         + "Name VARCHAR(255), "
         + "Salary INT NOT NULL, "
         + "Location VARCHAR(255))";
      boolean bool = stmt.execute(createTable);
      System.out.println(bool);



(b) executeUpdate(): This method is used to execute statements such as insert, update, delete. 
It returns an integer value representing the number of rows affected.

  String insertData = "INSERT INTO Employee("
         + "Name, Salary, Location) VALUES "
         + "('Amit', 30000, 'Hyderabad'), "
         + "('Kalyan', 40000, 'Vishakhapatnam'), "
         + "('Renuka', 50000, 'Delhi'), "
         + "('Archana', 15000, 'Mumbai')";

      int i = stmt.executeUpdate(insertData);
      System.out.println("Rows inserted: "+i);


(c) executeQuery(): This method is used to execute statements that returns tabular data (example select). 
It returns an object of the class ResultSet.

//Retrieving data
      ResultSet rs = stmt.executeQuery("Select *from Employee");

      while(rs.next()) {
         System.out.print("Name: "+rs.getString("Name")+", ");
         System.out.print("Salary: "+rs.getInt("Salary")+", ");
         System.out.print("City: "+rs.getString("Location"));
         System.out.println();
      }



