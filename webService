https://www.baeldung.com/maven-wsdl-stubs

1. spring soap
https://abhinnpandey.medium.com/using-soap-with-java-spring-boot-a-step-by-step-guide-16d1e0643840
@Endpoint
public class CalculatorServiceEndpoint {
    private final CalculatorService calculatorService;
@Autowired
    public CalculatorServiceEndpoint(CalculatorService calculatorService) {
        this.calculatorService = calculatorService;
    }
    @PayloadRoot(namespace = "http://your-namespace.com", localPart = "addRequest")
    @ResponsePayload
    public AddResponse add(@RequestPayload AddRequest request) {
        AddResponse response = new AddResponse();
        response.setResult(calculatorService.add(request.getA(), request.getB()));
        return response;
    }
    @PayloadRoot(namespace = "http://your-namespace.com", localPart = "subtractRequest")
    @ResponsePayload
    public SubtractResponse subtract(@RequestPayload SubtractRequest request) {
        SubtractResponse response = new SubtractResponse();
        response.setResult(calculatorService.subtract(request.getA(), request.getB()));
        return response;
    }
}

2. asyn soap 
https://stackoverflow.com/questions/60324772/make-asynchronous-soap-call-in-spring-webflux
https://stackoverflow.com/questions/49685056/reactive-spring-webclient-making-a-soap-call
https://stackoverflow.com/questions/34368029/how-to-send-a-soap-request-using-webservicetemplate



3.  webservice timeout 
https://stackoverflow.com/questions/6733744/how-to-set-timeout-in-spring-webservicetemplate
As stated in the introduction, a marshaller serializes an object to XML, and an unmarshaller deserializes XML stream to an objec.

++++++++++++++++++++++++++++++++++++++++++++++
java 17 :: SaajSoapMessageFactory

SaajSoapMessageFactory is a class in Spring Web Services that creates SOAP messages using the SAAJ (SOAP with Attachments API for Java) API. It is used to handle SOAP messages in web service applications.
Key Features:
It wraps a SAAJ MessageFactory, allowing for the creation of SOAP messages.
It can use SAAJ 1.3, 1.2, or 1.1, depending on what is available.
You can inject a MessageFactory or use the setMessageFactory property.
The setSoapVersion property is ignored if a MessageFactory is injected.
It supports both SOAP 1.1 and SOAP 1.2.
Java 17 Compatibility:
SaajSoapMessageFactory should work with Java 17.
However, there might be issues related to the module system introduced in Java 9 and later.
javax.xml.soap classes are not part of the default module in Java 9 and later.
Common Issues and Solutions:
java.lang.NoClassDefFoundError: javax/xml/soap/SOAPException: This error occurs because the javax.xml.soap package is not available by default in Java 9 and later.
To resolve this, you need to add the jakarta.xml.soap-api dependency to your project.
For example, in Maven, you would add:
Code

    <dependency>
        <groupId>jakarta.xml.soap</groupId>
        <artifactId>jakarta.xml.soap-api</artifactId>
        <version>2.0.0</version>
    </dependency>
Unable to create SAAJ meta-factory:
This error can occur if the SAAJ implementation is not found.
Ensure that you have a SAAJ implementation on your classpath.
This is usually provided by the jakarta.xml.soap dependency.
Provider SAAJMetaFactoryImpl not found:
This also indicates missing SAAJ implementation.
Double-check the dependencies and classpath configuration.
Dynamic Protocol Issues:
The default implementation of the "dynamic protocol" might not support the createMessage() method, which is used by SaajSoapMessageFactory to write responses, thus only supporting reading requests.
A custom MessageFactory implementation may be needed to support both requests and responses with dynamic protocols.
Troubleshooting Tips:
Check Dependencies: Ensure you have the correct jakarta.xml.soap-api dependency.
Verify Classpath: Make sure all required JARs are in your classpath.
Use a Compatible SAAJ Implementation: Ensure the SAAJ implementation is compatible with Java 17.
Review Stacktraces: Carefully analyze the stack traces to identify the root cause of the issue.
Configure Message Factory: You can configure the SaajSoapMessageFactory with a custom MessageFactory if needed.
By addressing these issues and ensuring the proper dependencies and configurations, you can successfully use SaajSoapMessageFactory in Java 17 applications.

======================================
soap | java jax-ws

Here's information about creating a SOAP web service using JAX-WS in Java 11:
Key Concepts
JAX-WS:
Java API for XML Web Services, a standard for creating SOAP-based web services. It simplifies the process by handling the conversion of Java objects to and from SOAP messages.
SOAP:
Simple Object Access Protocol, an XML-based messaging protocol for exchanging structured information in web services.
WSDL:
Web Services Description Language, an XML document describing web services, their operations, and data types.
Service Endpoint Interface (SEI):
A Java interface that declares the methods a client can invoke on the service. While not mandatory, it's a good practice. 
Implementation Bean Class:
The Java class that implements the service's logic.
Steps to Create a JAX-WS SOAP Service
Create a Service Endpoint Implementation Class:
Annotate the class with @WebService to mark it as a web service endpoint.
Use @WebMethod to expose specific methods to web service clients.
Java

    import javax.jws.WebMethod;
    import javax.jws.WebService;

    @WebService
    public class Hello {
        @WebMethod
        public String sayHello(String name) {
            return "Hello, " + name + "!";
        }
    }
Publish the Endpoint:
Use javax.xml.ws.Endpoint API to publish the web service.
Specify the address at which the service will be available.
Java

    import javax.xml.ws.Endpoint;

    public class HelloPublisher {
        public static void main(String[] args) {
            Endpoint.publish("http://localhost:8080/hello", new Hello());
            System.out.println("Service published at http://localhost:8080/hello");
        }
    }
Generate Client Code (if needed):
Use the wsimport tool (part of the JDK before Java 11 and can be added as a dependency in Java 11) to generate client-side classes from the WSDL file.
This tool creates proxy classes that simplify communication with the web service.
Code

    wsimport -keep -d <output_dir> <wsdl_url>
In Java 11, JAX-WS is not included in the JDK. You need to add dependencies like:
Code

        <dependency>
            <groupId>jakarta.xml.ws</groupId>
            <artifactId>jakarta.xml.ws-api</artifactId>
            <version>4.0.0</version>
        </dependency>
        <dependency>
            <groupId>org.glassfish.metro</groupId>
            <artifactId>webservices-rt</artifactId>
            <version>4.0.0</version>
        </dependency>
For JAXB (Java Architecture for XML Binding), add these dependencies:
Code

        <dependency>
            <groupId>org.glassfish.jaxb</groupId>
            <artifactId>jaxb-runtime</artifactId>
            <version>4.0.2</version>
        </dependency>
        <dependency>
            <groupId>jakarta.xml.bind</groupId>
            <artifactId>jakarta.xml.bind-api</artifactId>
            <version>4.0.0</version>
        </dependency>
Create a Client:
Use the generated proxy classes to invoke the service methods.
The JAX-WS runtime handles the underlying SOAP messaging.
Java

    import com.example.helloservice.Hello;
    import com.example.helloservice.HelloService;

    public class HelloClient {
        public static void main(String[] args) {
            HelloService service = new HelloService();
            Hello port = service.getHelloPort();
            String response = port.sayHello("Client");
            System.out.println("Response: " + response);
        }
    }
Important Considerations
Java 11+: JAX-WS is no longer part of the standard JDK. You need to add it as a dependency (Jakarta EE).
Maven/Gradle: Use a build tool to manage dependencies and simplify the build process.
WSDL: You can start with either a WSDL file or an implementation bean class. 
Testing: Tools like SoapUI can be used to test the web service endpoints.
This provides a basic overview of how to create a SOAP web service using JAX-WS in Java 11. 
Remember to adapt the code and configurations based on your specific requirements.

===========================================
For later JDK versions, we can use jaxws-maven-plugin by MojoHaus as described here.
Alternatively, org.jvnet.jaxb2â€˜s maven-jaxb2-plugin can 
come in handy as detailed in Invoking a SOAP Web Service in Spring.

https://www.baeldung.com/jax-ws
8.2. Connecting to the Web Service
The web service client uses the generated EmployeeService_Service 
to connect to the server and make web service calls remotely:

public class EmployeeServiceClient {
    public static void main(String[] args) throws Exception {
        URL url = new URL("http://localhost:8080/employeeservice?wsdl");

        EmployeeService_Service employeeService_Service 
          = new EmployeeService_Service(url);
        EmployeeService employeeServiceProxy 
          = employeeService_Service.getEmployeeServiceImplPort();

        List<Employee> allEmployees 
          = employeeServiceProxy.getAllEmployees();
    }
}

At client 
https://www.baeldung.com/java-soap-web-service
3.3. CountryService Interface
The CountryService interface acts as a proxy to the actual web service. 
It declares the findByName() method as defined in the server:

@WebService(name = "CountryService", targetNamespace = "http://server.ws.soap.baeldung.com/")
@SOAPBinding(style = SOAPBinding.Style.RPC)
public interface CountryService {
    @WebMethod
    @WebResult(partName = "return")
    public Country findByName(@WebParam(name = "arg0") String arg0);
}

4.1 rest webservice 
https://www.baeldung.com/spring-resttemplate-json-list
https://medium.com/code-kings/java-json-gson-how-to-access-a-nested-array-with-gson-3067df1991ba
https://www.callicoder.com/configuring-spring-boot-to-use-gson-instead-of-jackson/
https://www.baeldung.com/spring-rest-template-error-handling

RestTemplate itself is a synchronous client, meaning it blocks the current thread until a response is received. To handle asynchronous operations with RestTemplate, you can employ a few strategies: 
1. Using AsyncRestTemplate (Deprecated)
Spring previously provided AsyncRestTemplate, which is now deprecated. It uses a ListenableFuture to handle responses asynchronously.
This approach is generally not recommended for newer projects due to its deprecation.
2. Using @Async Annotation
You can annotate a method that uses RestTemplate with @Async. This allows the method to run in a separate thread, making the call non-blocking for the original thread.
Spring manages the thread pool for these asynchronous methods.
This approach is suitable when you need the asynchronous effect without needing a non-blocking client.
3. Using CompletableFuture
You can wrap the RestTemplate call in a CompletableFuture. This allows you to perform the call in a separate thread and manage the result asynchronously.
It provides a more flexible way to handle the result, including chaining operations and handling exceptions.
4. Using WebClient (Recommended)
For Spring 5 and above, WebClient is the recommended approach for asynchronous and non-blocking HTTP calls.
WebClient is built on top of non-blocking I/O and provides a more reactive approach to handling HTTP requests.
It offers better performance and resource utilization compared to RestTemplate for asynchronous tasks.
Example using @Async
Java

import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

@Service
public class MyService {

    private final RestTemplate restTemplate;

    public MyService(RestTemplate restTemplate) {
        this.restTemplate = restTemplate;
    }

    @Async
    public void fetchDataAsync(String url) {
        try {
            String response = restTemplate.getForObject(url, String.class);
            System.out.println("Async Response: " + response);
        } catch (Exception e) {
===============================================
>> how marshal and unmarshal java to xml 

https://www.bing.com/videos/riverview/relatedvideo?q=xmlAccessorType+usage+in+xml+java&mid=9C9586CDB1409826667D9C9586CDB1409826667D&FORM=VIRE

Yes, the @XmlAccessorType annotation in JAXB specifies how the JAXB 
(Java Architecture for XML Binding) framework should access the properties 
of a class when marshalling (converting Java objects to XML) or unmarshalling 
(converting XML to Java objects). It determines whether JAXB should use fields, 
getter/setter methods, or both for mapping.

Usage
The annotation is applied at the class level and takes a parameter of type XmlAccessType, 
which can have one of the following values:

XmlAccessType.FIELD
JAXB will use all non-static, non-transient fields of the class for mapping, 
regardless of whether they have public getter/setter methods.

XmlAccessType.PROPERTY
JAXB will use getter and setter methods for mapping. 
Fields without corresponding getter/setter methods will be ignored.

XmlAccessType.PUBLIC_MEMBER (Default)
JAXB will use public fields and public getter/setter methods for mapping.

XmlAccessType.NONE
JAXB will not automatically map any fields or properties. 
You must explicitly annotate the fields or methods you want to include in the mapping.

Example
Java

Copy code
import jakarta.xml.bind.annotation.XmlAccessorType;
import jakarta.xml.bind.annotation.XmlAccessType;
import jakarta.xml.bind.annotation.XmlRootElement;

@XmlRootElement
@XmlAccessorType(XmlAccessType.FIELD) // JAXB will use fields directly
public class Person {
    private String name; // Included in XML
    private int age;     // Included in XML

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public int getAge() {
        return age;
    }

    public void setAge(int age) {
        this.age = age;
    }
}
In this example, JAXB will directly use the fields name and age for XML mapping, 
ignoring the getter and setter methods because of XmlAccessType.FIELD.

This annotation is particularly useful for resolving conflicts when both fields and 
getter/setter methods exist, or when you want to control how JAXB processes your class.
+++++++++++++++++++++++++++++++++++++++++++++++
Generating Java client stubs from a WSDL in Java 11


Generating Java client stubs from a WSDL in Java 11 can be achieved using tools like Apache CXF or 
by leveraging JAX-WS (Jakarta XML Web Services) implementations. 

While wsimport and 
wsgen tools were removed from the default JDK in Java 11, 
they are available as part of JAX-WS implementations like Metro JAX-WS.
Here's a common approach using Apache CXF's wsdl2java tool with Maven:

1. Add CXF Codegen Plugin to your Maven pom.xml:
Code

<build>
    <plugins>
        <plugin>
            <groupId>org.apache.cxf</groupId>
            <artifactId>cxf-codegen-plugin</artifactId>
            <version>3.5.0</version> <!-- Use a recent version -->
            <executions>
                <execution>
                    <id>generate-sources</id>
                    <phase>generate-sources</phase>
                    <configuration>
                        <sourceRoot>${project.build.directory}/generated-sources/cxf</sourceRoot>
                        <wsdlOptions>
                            <wsdlOption>
                                <wsdl>${project.basedir}/src/main/resources/yourService.wsdl</wsdl>
                                <extraargs>
                                    <extraarg>-client</extraarg>
                                    <extraarg>-verbose</extraarg>
                                </extraargs>
                                <bindingFiles>
                                    <!-- Optional: Specify JAXB binding files for customization -->
                                    <!-- <bindingFile>${project.basedir}/src/main/resources/bindings.xjb</bindingFile> -->
                                </bindingFiles>
                            </wsdlOption>
                        </wsdlOptions>
                    </configuration>
                    <goals>
                        <goal>wsdl2java</goal>
                    </goals>
                </execution>
            </executions>
        </plugin>
    </plugins>
</build>

Explanation of wsdlOptions:

<wsdl>: Specifies the path to your WSDL file. You can also use <wsdlUrl> to point to a remote WSDL.
<extraargs>: Allows passing command-line arguments to wsdl2java.
-client: Generates client-side code.
-verbose: Provides detailed output during generation.

<bindingFiles> (Optional): If you need to customize the generated classes (e.g., package names, class names), 
you can provide JAXB binding files.

2. Place your WSDL File:
Place your yourService.wsdl file (and any associated XSDs) in the specified location, for example, src/main/resources/.
3. Run Maven Build:
Execute the Maven build from your project's root directory:
Code

mvn clean install
This will trigger the cxf-codegen-plugin during the generate-sources phase, and 
the generated Java stubs will be placed in the target/generated-sources/cxf directory (or the sourceRoot you configured).

4. Add CXF Dependencies:
You'll also need to include the necessary CXF dependencies in your pom.xml to use the generated stubs:
Code

<dependencies>
    <dependency>
        <groupId>org.apache.cxf</groupId>
        <artifactId>cxf-rt-frontend-jaxws</artifactId>
        <version>3.5.0</version>
    </dependency>
    <dependency>
        <groupId>org.apache.cxf</groupId>
        <artifactId>cxf-rt-transports-http</artifactId>
        <version>3.5.0</version>
    </dependency>
    <!-- Add other CXF modules if needed, e.g., for specific data bindings -->
</dependencies>
After these steps, you can use the generated client stubs in your Java 11 
application to interact with the web service defined by the WSDL.



