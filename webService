https://www.baeldung.com/maven-wsdl-stubs

1. spring soap
https://abhinnpandey.medium.com/using-soap-with-java-spring-boot-a-step-by-step-guide-16d1e0643840
@Endpoint
public class CalculatorServiceEndpoint {
    private final CalculatorService calculatorService;
@Autowired
    public CalculatorServiceEndpoint(CalculatorService calculatorService) {
        this.calculatorService = calculatorService;
    }
    @PayloadRoot(namespace = "http://your-namespace.com", localPart = "addRequest")
    @ResponsePayload
    public AddResponse add(@RequestPayload AddRequest request) {
        AddResponse response = new AddResponse();
        response.setResult(calculatorService.add(request.getA(), request.getB()));
        return response;
    }
    @PayloadRoot(namespace = "http://your-namespace.com", localPart = "subtractRequest")
    @ResponsePayload
    public SubtractResponse subtract(@RequestPayload SubtractRequest request) {
        SubtractResponse response = new SubtractResponse();
        response.setResult(calculatorService.subtract(request.getA(), request.getB()));
        return response;
    }
}

2. asyn soap 
https://stackoverflow.com/questions/60324772/make-asynchronous-soap-call-in-spring-webflux
https://stackoverflow.com/questions/49685056/reactive-spring-webclient-making-a-soap-call
https://stackoverflow.com/questions/34368029/how-to-send-a-soap-request-using-webservicetemplate



3.  webservice timeout 
https://stackoverflow.com/questions/6733744/how-to-set-timeout-in-spring-webservicetemplate
As stated in the introduction, a marshaller serializes an object to XML, and an unmarshaller deserializes XML stream to an objec.

++++++++++++++++++++++++++++++++++++++++++++++
java 17 :: SaajSoapMessageFactory

SaajSoapMessageFactory is a class in Spring Web Services that creates SOAP messages using the SAAJ (SOAP with Attachments API for Java) API. It is used to handle SOAP messages in web service applications.
Key Features:
It wraps a SAAJ MessageFactory, allowing for the creation of SOAP messages.
It can use SAAJ 1.3, 1.2, or 1.1, depending on what is available.
You can inject a MessageFactory or use the setMessageFactory property.
The setSoapVersion property is ignored if a MessageFactory is injected.
It supports both SOAP 1.1 and SOAP 1.2.
Java 17 Compatibility:
SaajSoapMessageFactory should work with Java 17.
However, there might be issues related to the module system introduced in Java 9 and later.
javax.xml.soap classes are not part of the default module in Java 9 and later.
Common Issues and Solutions:
java.lang.NoClassDefFoundError: javax/xml/soap/SOAPException: This error occurs because the javax.xml.soap package is not available by default in Java 9 and later.
To resolve this, you need to add the jakarta.xml.soap-api dependency to your project.
For example, in Maven, you would add:
Code

    <dependency>
        <groupId>jakarta.xml.soap</groupId>
        <artifactId>jakarta.xml.soap-api</artifactId>
        <version>2.0.0</version>
    </dependency>
Unable to create SAAJ meta-factory:
This error can occur if the SAAJ implementation is not found.
Ensure that you have a SAAJ implementation on your classpath.
This is usually provided by the jakarta.xml.soap dependency.
Provider SAAJMetaFactoryImpl not found:
This also indicates missing SAAJ implementation.
Double-check the dependencies and classpath configuration.
Dynamic Protocol Issues:
The default implementation of the "dynamic protocol" might not support the createMessage() method, which is used by SaajSoapMessageFactory to write responses, thus only supporting reading requests.
A custom MessageFactory implementation may be needed to support both requests and responses with dynamic protocols.
Troubleshooting Tips:
Check Dependencies: Ensure you have the correct jakarta.xml.soap-api dependency.
Verify Classpath: Make sure all required JARs are in your classpath.
Use a Compatible SAAJ Implementation: Ensure the SAAJ implementation is compatible with Java 17.
Review Stacktraces: Carefully analyze the stack traces to identify the root cause of the issue.
Configure Message Factory: You can configure the SaajSoapMessageFactory with a custom MessageFactory if needed.
By addressing these issues and ensuring the proper dependencies and configurations, you can successfully use SaajSoapMessageFactory in Java 17 applications.

======================================
soap | java jax-ws

Here's information about creating a SOAP web service using JAX-WS in Java 11:
Key Concepts
JAX-WS:
Java API for XML Web Services, a standard for creating SOAP-based web services. It simplifies the process by handling the conversion of Java objects to and from SOAP messages.
SOAP:
Simple Object Access Protocol, an XML-based messaging protocol for exchanging structured information in web services.
WSDL:
Web Services Description Language, an XML document describing web services, their operations, and data types.
Service Endpoint Interface (SEI):
A Java interface that declares the methods a client can invoke on the service. While not mandatory, it's a good practice. 
Implementation Bean Class:
The Java class that implements the service's logic.
Steps to Create a JAX-WS SOAP Service
Create a Service Endpoint Implementation Class:
Annotate the class with @WebService to mark it as a web service endpoint.
Use @WebMethod to expose specific methods to web service clients.
Java

    import javax.jws.WebMethod;
    import javax.jws.WebService;

    @WebService
    public class Hello {
        @WebMethod
        public String sayHello(String name) {
            return "Hello, " + name + "!";
        }
    }
Publish the Endpoint:
Use javax.xml.ws.Endpoint API to publish the web service.
Specify the address at which the service will be available.
Java

    import javax.xml.ws.Endpoint;

    public class HelloPublisher {
        public static void main(String[] args) {
            Endpoint.publish("http://localhost:8080/hello", new Hello());
            System.out.println("Service published at http://localhost:8080/hello");
        }
    }
Generate Client Code (if needed):
Use the wsimport tool (part of the JDK before Java 11 and can be added as a dependency in Java 11) to generate client-side classes from the WSDL file.
This tool creates proxy classes that simplify communication with the web service.
Code

    wsimport -keep -d <output_dir> <wsdl_url>
In Java 11, JAX-WS is not included in the JDK. You need to add dependencies like:
Code

        <dependency>
            <groupId>jakarta.xml.ws</groupId>
            <artifactId>jakarta.xml.ws-api</artifactId>
            <version>4.0.0</version>
        </dependency>
        <dependency>
            <groupId>org.glassfish.metro</groupId>
            <artifactId>webservices-rt</artifactId>
            <version>4.0.0</version>
        </dependency>
For JAXB (Java Architecture for XML Binding), add these dependencies:
Code

        <dependency>
            <groupId>org.glassfish.jaxb</groupId>
            <artifactId>jaxb-runtime</artifactId>
            <version>4.0.2</version>
        </dependency>
        <dependency>
            <groupId>jakarta.xml.bind</groupId>
            <artifactId>jakarta.xml.bind-api</artifactId>
            <version>4.0.0</version>
        </dependency>
Create a Client:
Use the generated proxy classes to invoke the service methods.
The JAX-WS runtime handles the underlying SOAP messaging.
Java

    import com.example.helloservice.Hello;
    import com.example.helloservice.HelloService;

    public class HelloClient {
        public static void main(String[] args) {
            HelloService service = new HelloService();
            Hello port = service.getHelloPort();
            String response = port.sayHello("Client");
            System.out.println("Response: " + response);
        }
    }
Important Considerations
Java 11+: JAX-WS is no longer part of the standard JDK. You need to add it as a dependency (Jakarta EE).
Maven/Gradle: Use a build tool to manage dependencies and simplify the build process.
WSDL: You can start with either a WSDL file or an implementation bean class. 
Testing: Tools like SoapUI can be used to test the web service endpoints.
This provides a basic overview of how to create a SOAP web service using JAX-WS in Java 11. 
Remember to adapt the code and configurations based on your specific requirements.

===========================================
For later JDK versions, we can use jaxws-maven-plugin by MojoHaus as described here.
Alternatively, org.jvnet.jaxb2â€˜s maven-jaxb2-plugin can 
come in handy as detailed in Invoking a SOAP Web Service in Spring.



