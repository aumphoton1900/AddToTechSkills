1]
public class CopyOnWriteArrayList<E>
    implements List<E>, RandomAccess, Cloneable, java.io.Serializable {
    private static final long serialVersionUID = 8673264195747942595L;
    /** The lock protecting all mutators */
    final transient ReentrantLock lock = new ReentrantLock();
    /** The array, accessed only via getArray/setArray. */
    private transient volatile Object[] array;

 public boolean add(E e) {
        final ReentrantLock lock = this.lock;
        lock.lock();
        try {
            Object[] elements = getArray();
            int len = elements.length;
            Object[] newElements = Arrays.copyOf(elements, len + 1);
            newElements[len] = e;
            setArray(newElements);
            return true;
        } finally {
            lock.unlock();
        }
    }
--------------------
2]
3. Don’t want to use synchronized ArrayList
As you know we can make a thread safe ArrayList by use synchronization. 
But synchronized ArrayList has some  limitation. 

In synchronized list all the read and write methods are synchronized. It means if a thread performs write operation, 
it blocks other threads even they just want to perform only read operations.
Reason: CopyOnWriteArrayList provide some more flexibility than synchronization.

1. In CopyOnWriteArrayList multiple threads can perform read operations concurrently.
2. If one thread performing read operation meanwhile another thread can write operation concurrently.
3. One thread can perform write operation while other threads can execute read operations simultaneously.

https://javagoal.com/java-copyonwritearrayset/
--------------------------------------------
ArrayList vs LinkedList 

In Java, ArrayList and LinkedList are two implementations of the List interface, 
each with distinct characteristics and use cases. Here's a concise comparison:

1. Underlying Data Structure
ArrayList: Uses a dynamic array to store elements.
LinkedList: Uses a doubly-linked list, where each node contains data and references to the next and previous nodes.

2. Performance
Access (Get/Set):
ArrayList: Faster, as it provides O(1) time complexity for random access.
LinkedList: Slower, as it requires O(n) time complexity to traverse nodes.

Insertion/Deletion:
ArrayList: Slower for operations in the middle or beginning, as it involves shifting elements (O(n)).
LinkedList: Faster for insertion/deletion at the middle or beginning (O(1) if the node reference is known).

Memory Usage:
ArrayList: More memory-efficient as it only stores data.
LinkedList: Consumes more memory due to node pointers (next and previous
---------------------------------------------
The CopyOnWriteArrayList is a thread-safe variant of ArrayList introduced in Java 1.5. 
It is part of the java.util.concurrent package and is designed for scenarios where read 
operations significantly outnumber write operations. Here's an overview of its implementation and usage:

Implementation
Thread-Safety: Achieved by creating a new copy of the underlying array whenever a modification (add, remove, set, etc.) is performed.
Read Operations: These are performed on the original array, ensuring no locking is required, making reads very fast.
Write Operations: Since a new copy is created for every modification, write operations are relatively 
expensive in terms of memory and performance.

Key Features
Fail-Safe Iteration: Iterators do not throw ConcurrentModificationException because they operate on a snapshot 
of the array at the time of their creation.
Best Use Case: Ideal for applications with frequent reads and infrequent writes, such as caching or event-listener lists.

Example-01
-----------

public static void concurrentModificationException_eg01() {
	        // Create a CopyOnWriteArrayList
	        CopyOnWriteArrayList<String> list = new CopyOnWriteArrayList<>();

	        // Add elements
	        list.add("Apple");
	        list.add("Banana");
	        list.add("Cherry");

	        // Iterate over the list
	        System.out.println("Iterating over the list:");
	        for (String fruit : list) {
	            System.out.println(fruit);
	        }

	        // Modify the list while iterating
	        System.out.println("\nModifying the list during iteration:");
	        for (String fruit : list) {
	            System.out.println(fruit);
	            if (fruit.equals("Banana")) {
	                list.add("Date"); // Safe modification
	            }
	        }

	        // Display the updated list
	        System.out.println("\nUpdated list:");
	        for (String fruit : list) {
	            System.out.println(fruit);
	        }
	    }


Iterating over the list:
Apple
Banana
Cherry

Modifying the list during iteration:
Apple
Banana
Cherry

Updated list:
Apple
Banana
Cherry
Date


 public static void concurrentModificationException_eg02() {
	        // Create a CopyOnWriteArrayList
	        List<String> list = new ArrayList<>();

	        // Add elements
	        list.add("Apple");
	        list.add("Banana");
	        list.add("Cherry");

	        // Iterate over the list
	        System.out.println("Iterating over the list:");
	        for (String fruit : list) {
	            System.out.println(fruit);
	        }

	        // Modify the list while iterating
	        System.out.println("\nModifying the list during iteration:");
	        for (String fruit : list) {
	            System.out.println(fruit);
	            if (fruit.equals("Banana")) {
	                list.add("Date"); // Safe modification
	            }
	        }

	        // Display the updated list
	        System.out.println("\nUpdated list:");
	        for (String fruit : list) {
	            System.out.println(fruit);
	        }
	    }
Iterating over the list:
Apple
Banana
Cherry

Modifying the list during iteration:
Apple
Banana
Exception in thread "main" java.util.ConcurrentModificationException
	at java.util.ArrayList$Itr.checkForComodification(ArrayList.java:911)
	at java.util.ArrayList$Itr.next(ArrayList.java:861)
	at java8.util.CopyOnWriteArrayListExample.concurrentModificationException_eg02(CopyOnWriteArrayListExample.java:57)
	at java8.util.CopyOnWriteArrayListExample.main(CopyOnWriteArrayListExample.java:75)
------------------------------------------------------------------------
> vector vs list

Here’s a concise comparison of Vector and List in programming, focusing on their key differences:

1. Memory Allocation
Vector: Uses contiguous memory allocation, making it efficient for random access.
List: Uses non-contiguous memory (linked nodes), which is better for frequent insertions and deletions.
2. Performance
Vector:
Fast random access (O(1)).
Slower for insertions/deletions in the middle or beginning (O(n)).
List:
Slower random access (O(n)).
Faster insertions/deletions (O(1)) if the position is known.
3. Synchronization (Java-specific)
Vector: Synchronized, making it thread-safe but slower in single-threaded environments.
List: Not synchronized, so it’s faster but requires external synchronization for thread safety.
4. Use Cases
Vector: Ideal for scenarios requiring frequent random access and dynamic resizing.
List: Suitable for applications with frequent insertions/deletions and less random access.
5. Default Size (Java-specific)
Vector: May have a default size and grows dynamically.
List: Does not have a default size.

In summary, choose Vector for random access and List for dynamic, frequent modifications.

---------------------------

