1.
https://vladmihalcea.com/optimistic-locking-version-property-jpa-hibernate/
However, this session-based database interaction is no longer the norm, especially when accessing services over the Internet. 
This is because you can no longer hold onto a database connection across multiple HTTP requests. 
For this reason, the ACID guarantees no longer hold when your application-level transaction spans over 
multiple HTTP requests as well as physical database transactions.
One example of an anomaly that can happen because reads and writes happen in different database transactions is the lost update phenomenon.

https://www.logicbig.com/tutorials/spring-framework/spring-data/pessimistic-locking-and-lock-annotation.html
https://stackoverflow.com/questions/4509086/what-is-the-difference-between-persist-and-merge-in-jpa-and-hibernate

https://medium.com/@rajibrath20/the-best-way-to-map-a-onetomany-relationship-with-jpa-and-hibernate-dbbf6dba00d3#:~:text=The%20inverse%20side%20of%20a%20bidirectional%20relationship%20must,entity%20that%20is%20the%20owner%20of%20the%20relationship.

2. why hibernate/jdbc can not use for global transaction mgmt but only for local transaction management.
3. cache 
https://medium.com/@himani.prasad016/caching-in-hibernate-3ad4f479fcc0
1st - session 
2nd - sessionFactory | CacheConcurrencyStrategy.
The cache concurrency strategy determines how multiple threads access the cache. 
Hibernate supports multiple cache concurrency strategies such as 
READ_ONLY, 
NONSTRICT_READ_WRITE, 
READ_WRITE, and 
TRANSACTIONAL.

hibernate cache , invalidate 
------------------------------------
To ensure data consistency, Hibernate provides a cache synchronization mechanism that 
automatically updates the cache when the database is updated. This mechanism is called cache invalidation. 
When an entity is updated, Hibernate invalidates the corresponding cache entry,
and the next time the entity is accessed, it is fetched from the database and stored in the cache.

>>To enable query caching in Hibernate, you need to set the hibernate.cache.use_query_cache property to true.
   spring.jpa.properties.hibernate.cache.use_query_cache=true
   spring.jpa.properties.hibernate.cache.region.factory_class=org.hibernate.cache.ehcache.EhCacheRegionFactory.
@Repository
public interface AuthorRepository extends CrudRepository<Author, Integer> {
    @QueryHints({ @QueryHint(name = "org.hibernate.cacheable", value ="true") })
    Author findByName(String name);
}
https://www.baeldung.com/spring-data-jpa-query-hints
----------------------------------------------------------------







