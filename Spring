Transaction Management
1.
Mixing the database I/O with other types of I/O in a transactional context isn’t a great idea.
So, the first solution for these sorts of problems is to separate these types of I/O altogether.
If for whatever reason we can’t separate them, we can still use Spring APIs to manage transactions manually.

Using TransactionTemplate
TransactionTemplate provides a set of callback-based APIs to manage transactions manually. 
In order to use it, we should first initialize it with a PlatformTransactionManager.
// test annotations
class ManualTransactionIntegrationTest {
    @Autowired
    private PlatformTransactionManager transactionManager;
    private TransactionTemplate transactionTemplate;
    @BeforeEach
    void setUp() {
        transactionTemplate = new TransactionTemplate(transactionManager);
    } 
    // omitted
}
The PlatformTransactionManager helps the template to create, commit or roll back transactions.
When using Spring Boot, an appropriate bean of type PlatformTransactionManager will be automatically registered,
so we just need to simply inject it. 
Otherwise, we should manually register a PlatformTransactionManager bean.

1) Class DefaultTransactionDefinition
All Implemented Interfaces:
Serializable, TransactionDefinition
Direct Known Subclasses:
DefaultTransactionAttribute, TransactionTemplate

PREFIX_ISOLATION  Prefix for the isolation constants defined in TransactionDefinition.
PREFIX_PROPAGATION Prefix for the propagation constants defined in TransactionDefinition.
PREFIX_TIMEOUT Prefix for transaction timeout values in description strings.
READ_ONLY_MARKER Marker for read-only transactions in description strings.

Fields inherited from interface org.springframework.transaction.TransactionDefinition
ISOLATION_DEFAULT, ISOLATION_READ_COMMITTED, 
ISOLATION_READ_UNCOMMITTED, ISOLATION_REPEATABLE_READ, 
ISOLATION_SERIALIZABLE, 

PROPAGATION_MANDATORY, 
PROPAGATION_NESTED, 
PROPAGATION_NEVER, 
PROPAGATION_NOT_SUPPORTED, 
PROPAGATION_REQUIRED, 
PROPAGATION_REQUIRES_NEW, 
PROPAGATION_SUPPORTS, 
TIMEOUT_DEFAULT

final void setIsolationLevel(int isolationLevel) : Set the isolation level.
final void setIsolationLevelName(String constantName)
Set the isolation level by the name of the corresponding constant in TransactionDefinition — for example, "ISOLATION_DEFAULT".
final void setName(String name) Set the name of this transaction.
final void setPropagationBehavior(int propagationBehavior) Set the propagation behavior.
final void setPropagationBehaviorName(String constantName)
Set the propagation behavior by the name of the corresponding constant in TransactionDefinition — for example, "PROPAGATION_REQUIRED".

TransactionTemplate
Template class that simplifies programmatic transaction demarcation and transaction exception handling.
TransactionTemplate(PlatformTransactionManager transactionManager, TransactionDefinition transactionDefinition)
Construct a new TransactionTemplate using the given transaction manager, taking its default settings from the given transaction definition.

<T> T execute(TransactionCallback<T> action)
Execute the action specified by the given callback object within a transaction.

Example-01
=============
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.FileSystemXmlApplicationContext;
import org.springframework.transaction.TransactionStatus;
import org.springframework.transaction.support.TransactionTemplate;
import org.springframework.transaction.support.TransactionCallback;
import org.springframework.jdbc.core.JdbcTemplate;

public class TestTransaction {
    public static void main(String[] args) {
        ApplicationContext context = new FileSystemXmlApplicationContext(
                new String[] { "src\\transaction.xml", "src\\MyDataSource.xml", "src\\jdbctemplate.xml" });
        TransactionTemplate transactionTemplate = (TransactionTemplate) context.getBean("transactionTemplate");
        final JdbcTemplate jdbcTemplate = (JdbcTemplate) context.getBean("jdbcTemplate");

        transactionTemplate.execute(new TransactionCallback() {
            public Object doInTransaction(TransactionStatus status) {
                try {
                    jdbcTemplate.update("delete from t_message");
                    jdbcTemplate.update("insert into t_message(id, name) values(1, '____1')");
                    jdbcTemplate.update("insert into t_message(id, name) values(2, '____2')");
                } catch (Exception e) {
                    status.setRollbackOnly();
                }//   w   w w .  d    e m o    2s  .  c    o  m
                return null;
            }
        });
    }
}


