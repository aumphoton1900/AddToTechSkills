Transaction Management
1.
Mixing the database I/O with other types of I/O in a transactional context isn’t a great idea.
So, the first solution for these sorts of problems is to separate these types of I/O altogether.
If for whatever reason we can’t separate them, we can still use Spring APIs to manage transactions manually.

Using TransactionTemplate
TransactionTemplate provides a set of callback-based APIs to manage transactions manually. 
In order to use it, we should first initialize it with a PlatformTransactionManager.
// test annotations
class ManualTransactionIntegrationTest {
    @Autowired
    private PlatformTransactionManager transactionManager;
    private TransactionTemplate transactionTemplate;
    @BeforeEach
    void setUp() {
        transactionTemplate = new TransactionTemplate(transactionManager);
    } 
    // omitted
}
The PlatformTransactionManager helps the template to create, commit or roll back transactions.
When using Spring Boot, an appropriate bean of type PlatformTransactionManager will be automatically registered,
so we just need to simply inject it. 
Otherwise, we should manually register a PlatformTransactionManager bean.

1) Class DefaultTransactionDefinition
All Implemented Interfaces:
Serializable, TransactionDefinition
Direct Known Subclasses:
DefaultTransactionAttribute, TransactionTemplate

PREFIX_ISOLATION  Prefix for the isolation constants defined in TransactionDefinition.
PREFIX_PROPAGATION Prefix for the propagation constants defined in TransactionDefinition.
PREFIX_TIMEOUT Prefix for transaction timeout values in description strings.
READ_ONLY_MARKER Marker for read-only transactions in description strings.

Fields inherited from interface org.springframework.transaction.TransactionDefinition
ISOLATION_DEFAULT, ISOLATION_READ_COMMITTED, 
ISOLATION_READ_UNCOMMITTED, ISOLATION_REPEATABLE_READ, 
ISOLATION_SERIALIZABLE, 

PROPAGATION_MANDATORY, 
PROPAGATION_NESTED, 
PROPAGATION_NEVER, 
PROPAGATION_NOT_SUPPORTED, 
PROPAGATION_REQUIRED, 
PROPAGATION_REQUIRES_NEW, 
PROPAGATION_SUPPORTS, 
TIMEOUT_DEFAULT

final void setIsolationLevel(int isolationLevel) : Set the isolation level.
final void setIsolationLevelName(String constantName)
Set the isolation level by the name of the corresponding constant in TransactionDefinition — for example, "ISOLATION_DEFAULT".
final void setName(String name) Set the name of this transaction.
final void setPropagationBehavior(int propagationBehavior) Set the propagation behavior.
final void setPropagationBehaviorName(String constantName)
Set the propagation behavior by the name of the corresponding constant in TransactionDefinition — for example, "PROPAGATION_REQUIRED".

TransactionTemplate
Template class that simplifies programmatic transaction demarcation and transaction exception handling.
TransactionTemplate(PlatformTransactionManager transactionManager, TransactionDefinition transactionDefinition)
Construct a new TransactionTemplate using the given transaction manager, taking its default settings from the given transaction definition.

<T> T execute(TransactionCallback<T> action)
Execute the action specified by the given callback object within a transaction.

Example-01
=============
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.FileSystemXmlApplicationContext;
import org.springframework.transaction.TransactionStatus;
import org.springframework.transaction.support.TransactionTemplate;
import org.springframework.transaction.support.TransactionCallback;
import org.springframework.jdbc.core.JdbcTemplate;

public class TestTransaction {
    public static void main(String[] args) {
        ApplicationContext context = new FileSystemXmlApplicationContext(
                new String[] { "src\\transaction.xml", "src\\MyDataSource.xml", "src\\jdbctemplate.xml" });
        TransactionTemplate transactionTemplate = (TransactionTemplate) context.getBean("transactionTemplate");
        final JdbcTemplate jdbcTemplate = (JdbcTemplate) context.getBean("jdbcTemplate");

        transactionTemplate.execute(new TransactionCallback() {
            public Object doInTransaction(TransactionStatus status) {
                try {
                    jdbcTemplate.update("delete from t_message");
                    jdbcTemplate.update("insert into t_message(id, name) values(1, '____1')");
                    jdbcTemplate.update("insert into t_message(id, name) values(2, '____2')");
                } catch (Exception e) {
                    status.setRollbackOnly();
                }//   w   w w .  d    e m o    2s  .  c    o  m
                return null;
            }
        });
    }
}
https://www.demo2s.com/java/spring-transactiontemplate-execute-transactioncallback-t-action.html
https://www.demo2s.com/java/java-org-springframework-transaction-support-transactiontemplate.html

2.@Transactional
 How to Use @Transactional
We can put the annotation on definitions of interfaces, classes, or directly on methods

Spring applies the class-level annotation to all public methods of this class that we did not annotate with @Transactional.
However, if we put the annotation on a private or protected method, Spring will ignore it without an error.

3. Transaction Propagation
Propagation defines our business logic’s transaction boundary. 
Spring manages to start and pause a transaction according to our propagation setting.

For SUPPORTS, Spring first checks if an active transaction exists. If a transaction exists, 
then the existing transaction will be used. If there isn’t a transaction, it is executed non-transactional:
https://www.baeldung.com/spring-transactional-propagation-isolation

The JTATransactionManager supports real transaction suspension out-of-the-box. 
Others simulate the suspension by holding a reference to the existing one and then clearing it from the thread context.

3.7. NESTED Propagation
For NESTED propagation, Spring checks if a transaction exists, and if so, it marks a save point. 
This means that if our business logic execution throws an exception, then the transaction rollbacks to this save point. 
If there’s no active transaction, it works like REQUIRED.

DataSourceTransactionManager supports this propagation out-of-the-box. 
Some implementations of JTATransactionManager may also support this.

JpaTransactionManager supports NESTED only for JDBC connections. 
However, if we set the nestedTransactionAllowed flag to true, 
it also works for JDBC access code in JPA transactions if our JDBC driver supports save points.

===============================
4. Transaction Isolation
Isolation is one of the common ACID properties: Atomicity, Consistency, Isolation, and Durability. 
Isolation describes how changes applied by concurrent transactions are visible to each other.

Each isolation level prevents zero or more concurrency side effects on a transaction:

Dirty read: read the uncommitted change of a concurrent transaction
Nonrepeatable read: get different value on re-read of a row if a concurrent transaction updates the same row and commits
Phantom read: get different rows after re-execution of a range query if another transaction adds or removes some rows 
in the range and commits
We can set the isolation level of a transaction by @Transactional::isolation. It has these five enumerations in 
Spring: DEFAULT, READ_UNCOMMITTED, READ_COMMITTED, REPEATABLE_READ, SERIALIZABLE.

==========================
(1.) How to test controller ?

@WebMvcTest(controllers = {LibraryAssetController.class})
public class LibraryAssetControllerUnitTest {
    private final LibraryAsset bookThingsFallApart =
            LibraryAsset.builder().assetTitle("Things Fall Apart").assetCode("0385474547")
                    .editionYear((short) 1958).creatorName("Chinua Achebe").publisherName("William Heinemann")
                    .priceUSD("17.95").assetCategory(EntityCharacteristics.BOOK_FICTION)
                    .assetType(EntityCharacteristics.BOOK_PAPERBACK).build();

    private final LibraryAsset mediaTAJazz =
            LibraryAsset.builder().assetTitle("Trans Atlantic Jazz").assetCode("0385474548")
                    .editionYear((short) 2001).creatorName("Jazperience").publisherName("L. Asle Roe")
                    .priceUSD("9.95").assetCategory(EntityCharacteristics.MEDIA_AUDIO)
                    .assetType(EntityCharacteristics.MEDIA_AUDIO).build();

    private final List<LibraryAsset> baseAssets = Arrays.asList(this.bookThingsFallApart, this.mediaTAJazz);

    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private LibraryAssetService assetService;

    // Tests with the @Test annotation.

}

@Test
    public void whenGetAllAssets_thenControlFlowCorrect() throws Exception {
        Mockito.when(this.assetService.getAllAssets()).thenReturn(this.baseAssets);

        this.mockMvc.perform(MockMvcRequestBuilders.get("/assets/v1/all"))
                .andExpect(MockMvcResultMatchers.status().isOk())
                .andExpect(MockMvcResultMatchers.content().contentType(MediaType.APPLICATION_JSON_VALUE))
                .andExpect(MockMvcResultMatchers.jsonPath("$").isArray())
                .andExpect(
                        MockMvcResultMatchers.jsonPath("$[0].assetCode")
                                .value(this.bookThingsFallApart.getAssetCode())
                ).andExpect(
                        MockMvcResultMatchers.jsonPath("$[1].assetCode")
                                .value(this.mediaTAJazz.getAssetCode())
                );

        Mockito.verify(this.assetService, Mockito.times(1)).getAllAssets();
    }

(2.) 
What Are @WebMvcTest and @SpringBootTest
The @WebMvcTest annotation is used to create MVC (or more specifically controller) related tests. 
It can also be configured to test for a specific controller. It mainly loads and makes testing of the web layer easy.
The @SpringBootTest annotation is used to create a test environment by loading a full application context 
(like classes annotated with @Component and @Service, DB connections, etc). It looks for the main class (which has the @SpringBootApplication annotation) and 
uses it to start the application context.
Both of these annotations were introduced in Spring Boot 1.4.

https://www.baeldung.com/spring-mockmvc-vs-webmvctest
https://www.baeldung.com/junit-datajpatest-repository

(3.)
 https://docs.spring.io/spring-boot/docs/1.0.0.RELEASE/reference/html/production-ready-metrics.html
https://www.dineshonjava.com/spring-boot-actuator-complete-guide/

MCQ :
pathparameter
https://swagger.io/docs/specification/v3_0/describing-parameters/#:~:text=Path%20parameters%20are%20variable%20parts,denoted%20with%20curly%20braces%20%7B%20%7D%20.

4. spring batch 
video : https://www.youtube.com/watch?v=qaSBljS6SZk
Spring Boot - Multithreading | Process Millions of Records in Batches | Hands-on Example

5. Async 
https://www.youtube.com/watch?v=R_gejlOXR7g

6. soap : baeldung / jax-ws 
   wsdl : udemy 
  webservice can be deployed as war file to application server like wildfly , glassfish.
 wsimport : xml to java classes [soap ] till java version 1.8 
 jaxws-maven-plugin or maven-jaxb2-plugin : java version > 1.8

https://javaee.github.io/tutorial/jaxws002.html
soap - how to create client code 
 mvn clean jaxws:wsimport 
jakarta.xml.ws : jakarta.xml.ws-api 
com.sun.xml.ws : jaxws-rt 
com.sun.xml.ws : jaxws-ri 
plugin = com.sun.xml.ws : jaxws-maven-plugin 
configuration : wsdlUrls , packageName - where java code generate

Q6.1 : how to consume a soap webservice in java using JAX-WS RI and wsimport 
       utility for java 11.
generated pojo annotated with annotation for xml marshaller , unmarshaller.
eg :@XmlAccerssorType , @XmlType ,@XmlSchemaType

@WebServiceClient(name = "",wdslLocation = "")
class A exptends javax.xml.ws.Service - provide method to interact with web service .
@webEndpoint(name = "CountryServiceImplPort() {}

6.2 alternatively u can use other jax-ws implementation like  , apache cxf , apache axis2 , spring to do same.
https://www.baeldung.com/java-soap-web-service
https://medium.com/@salmankhan_27014/consuming-soap-based-web-services-in-java-e6a1645606ca

7. SOAP
========
7.1 ) SOAP over JMS allows you to use the JMS transport with SOAP messages, 
and is an alternative messaging mechanism to the standard SOAP over HTTP messaging.
https://stackoverflow.com/questions/15705892/what-is-the-purpose-of-ws-addressing?rq=3
https://stackoverflow.com/questions/12671909/need-to-use-both-soapaction-and-payloadroot-in-single-application?rq=3



8. soap in spring.
https://docs.spring.io/spring-ws/site/reference/html/server.html

8.1 ) soap is synchronous or asynchronous ?
    spring soap is synchronous or asynchronous

9) jaxb vs sax vs dom vs stax 
https://stackoverflow.com/questions/7709928/jaxb-vs-dom-and-sax

10. logging 

Java Spring
Starting from Spring Framework 5.0, a Commons Logging bridge has been incorporated within the spring-jcl module. 
This bridge can detect the presence of Log4j 2.x API and SLF4J 1.7 API in the classpath. 
The bridge selects the first available logging implementation from these APIs and uses it for logging. 
If none of these APIs are present, the bridge defaults to the Java platform's core logging facilities, 
also known as JUL or java.util.logging.
The variant of Commons Logging provided by Spring is specifically designed for infrastructure 
logging purposes within the core framework and its extensions. For logging requirements within the application code, 
it is recommended to directly use Log4j 2.x, SLF4J, or JUL.
Spring Boot has become the de facto standard for logging in Spring-based applications. 
However, it is important to note that logging in Spring Boot is based on the same logging abstraction 
layer used in the Spring framework. Therefore, the same principles and concepts that apply to 
logging in Spring Boot also apply to logging in other Spring-based applications that use the 
Spring framework's logging abstraction layer.
Spring Boot uses Commons Logging for all internal logging but leaves the underlying log implementation open. 
Default configurations are provided for Java Util Logging, Log4j2, and Logback. 
In each case, loggers are pre-configured to use console output, with optional file output also available.
https://portal.securecodewarrior.com/#/courses/course-task/71d3fa27-a74f-4a37-9d55-2224b5306900/
e4351243-a515-4af1-84f2-54365b32481e/
51df3cf6-5a9f-4597-9588-09346451b571/987bcd1d-d7f3-41a1-98c7-9029321349f5
