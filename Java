Files
1. public static Stream<String> lines​(Path path) throws IOException
Read all lines from a file as a Stream. Bytes from the file are decoded into characters using the UTF-8 charset.
Returns: the lines from the file as a Stream
Throws:
IOException - if an I/O error occurs opening the file
SecurityException - In the case of the default provider, and a security manager is installed, 
the checkRead method is invoked to check read access to the file.

1.2   public static Stream<String> lines(Path path) throws IOException
1.3   public static Stream<String> lines(Path path,Charset cs) throws IOException
      Read all lines from a file as a Stream.
https://www.logicbig.com/how-to/code-snippets/jcode-java-io-files-lines.html

class loader  - application ,Extension , 
bootstrap - serve as parent of 

Memory Management 
==================
https://javarush.com/en/groups/posts/en.917.garbage-collector-in-java
Permgen vs Metaspace 

Java 11 changes
-----------------
Removal of Java EE and CORBA Modules

In JDK 11, the Java EE and CORBA modules were removed. These modules were deprecated for removal in JDK 9.

The removed modules were:

java.xml.ws: Java API for XML Web Services (JAX-WS), Web Services Metadata for the Java Platform, and 
SOAP with Attachments for Java (SAAJ)
java.xml.bind: Java Architecture for XML Binding (JAXB)
java.xml.ws.annotation: The subset of the JSR-250 Common Annotations defined by Java SE to support web services
java.corba: CORBA
java.transaction: The subset of the Java Transaction API defined by Java SE to support CORBA Object Transaction Services
java.activation: JavaBeans Activation Framework
java.se.ee: Aggregator module for the six modules above
jdk.xml.ws: Tools for JAX-WS
jdk.xml.bind: Tools for JAXB

a) 
java.lang.ClassNotFoundException: javax.xml.ws.WebServiceFeature in Java 11.
Caused by: java.lang.ClassNotFoundException: javax.xml.ws.WebServiceFeature

https://crunchify.com/java-jdk-11-and-details-on-deprecated-java-ee-modules-including-jaxb-jax-ws-jaf-jta-corba/
https://www.studytonight.com/post/solved-caused-by-javalangclassnotfoundexception-javaxxmlwswebservicefeature-in-java-11

After java 11 changes.
dependency>
    <groupId>javax.xml.ws</groupId>
    <artifactId>jaxws-api</artifactId>
    <version>2.3.1</version>
</dependency>
This will include the jaxws-api Jar file in your project when you will build your maven java project.

Getting Ready for Java 11/JDK 11 and Deprecated Java EE Modules JAXB, JAX-WS, JAF, JTA, CORBA.
3.1
---
class Singleton implements Serializable {
 
    // public instance initialized when loading the class
    public static Singleton instance = new Singleton();
 
    private Singleton()
    {
        // private constructor
    }
 
    // implement readResolve method
    protected Object readResolve() { return instance; }
}
-----------
<<Java 17 changes >>
1.
switch statement was limited to 

byte, short, char, int, 
Byte, Character, Short, Integer, 
String, and Enum types.

to use patterns to match against the value of an object of any type.

Note: case statements can now be written as `case …expression ->’ instead of  ‘case expression:’ since Java 12.
Java 12 introduced an enhanced switch expression syntax that eliminates the need for break statements. 
This new syntax uses the -> operator instead of the traditional : 
for case labels. When a case matches, only the code to the right of the -> is executed, 
and there's no fall-through to the next case.

Furthermore, this also allows us to use multiple options as case labels. 
Here is an example of how to use the enhanced switch statement with multi-value labels:

int value = 5;
switch (value) {
    case 1 -> System.out.println("One");
    case 2 -> System.out.println("Two");
    case 3, 4 -> System.out.println("Three or Four");
    default -> System.out.println("Invalid value");
}
Below example shows the summary of types that are allowed in a case label till Java 21:

public String testType(Object obj) {  
    return switch (obj) { 
        case null -> "NULL value"; 
        case String str -> "It's a String";  
        case Size s -> "Enum Type"; 
        case Point p -> "Records Type"; 
        case Employee e -> "Custom Object's Type"; 
        case int[] ai -> "Array Type"; 
        case Employee e when e.getName().equals("John") -> "Conditional Statement";  
        default -> "Unknown"; 
     }; 
} 

public enum Size {  
   SMALL, MEDIUM, LARGE; 
} 
public record Point(int i, int j) { ..... } 
public class Employee{ ..... }
https://javatechonline.com/java-17-features/

In the example above, record is a new type introduced in Java 14. To know more about records type, 
kindly go through record type in Java 14 under Java 14 features.

The ‘when’ clause is added in Java 21 which allows us to include conditional statement in a case label.
This is called a guarded pattern label. 
For a separate comprehensive guide on Guarded Patterns with examples, kindly visit Guarded Pattern in Java 21.

2]
public class HelloWorld{

  public static String getDayOfWeek(int dayNum) {
    return switch (dayNum) {
        case 1 -> "Monday";
        case 2 -> "Tuesday";
        case 3 -> "Wednesday";
        case 4 -> "Thursday";
        case 5 -> "Friday";
        case 6 -> "Saturday";
        case 7 -> "Sunday";
        default -> "Invalid day";
    };
}

     public static void main(String []args){
        System.out.println(getDayOfWeek(3));
     }
} //wednesday

Note: case statements can now be written as `case …expression ->’ instead of  ‘case expression:’ since Java 12.
As shown in the example, since Java 12, the case statements now use the new arrow operator (->) to specify the pattern and 
the result expression. It also eliminates the break statement at each case.

record CreditCardPayment(String cardNumber) {}

//Record class for PayPalPayment
record PayPalPayment(String email) {}

public class PaymentProcessing {

    private static void processPayment(Object payment) {
        String result = switch (payment) {
            case CreditCardPayment cc ->
                 "Processing Credit Card payment with card number: " + cc.cardNumber();
            case PayPalPayment pp -> "Processing PayPal payment with email: " + pp.email();
            case Integer amount -> "Processing Cash payment of $" + amount;
            case null -> "Invalid payment method: null";
            default -> "Unknown payment method.";
        };
        System.out.println(result);
    }

    public static void main(String[] args) {
        processPayment(new CreditCardPayment("1234-5678-9876-5432"));
        processPayment(new PayPalPayment("user@example.com"));
        processPayment(500); 
        processPayment(null); 
    }
}

==============================


