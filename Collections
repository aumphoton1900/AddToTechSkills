Set
=========
1. how HashSet , LinkedhashSet work internally in java ? [javaconceptoftheday]
2. how linkedhashSet maintain insertion order in java ?

To maintain the order of insertion we need 2 more pointers at every 
Node(besides the next pointer required for LinkedList functionality). 
So besides this linkedList, another doubly-linked-list is also maintained 
in the hashmap which is used to handle the insertion order.
So the LinkedHashMap Node(named LinkedHashMapEntry) will look like:
https://javahungry.blogspot.com/2015/09/how-linkedhashset-works-internally-in-java.html




Queue
=======
1. a ds where elements are added from one end tail of queue , removed (head).
 PriorityQueue , ArrayDeque,LinkedList.

Q1 : 
        List l = new ArrayList<Integer>();
        l.add("ram");
        l.add(new Object());

Q2 : 
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

class Employee {
    private String name;
    private List<String> phoneNumbers;

    public Employee(String name, List<String> phoneNumbers) {
        this.name = name;
        this.phoneNumbers = phoneNumbers;
    }

    public List<String> getPhoneNumbers() {
        return phoneNumbers;
    }
}

public class FlatMapExample {
    public static void main(String[] args) {
        // Sample data
        List<Employee> employees = Arrays.asList(
            new Employee("Alice", Arrays.asList("1234567890", "9876543210")),
            new Employee("Bob", Arrays.asList("4567891230")),
            new Employee("Charlie", Arrays.asList("7891234560", "3216549870"))
        );

        // Using flatMap to retrieve all phone numbers
        List<String> phoneNumbers = employees.stream()
            .map(Employee::getPhoneNumbers) // Map to List<String> of phone numbers
            .flatMap(List::stream)         // Flatten the stream of lists into a single stream
            .collect(Collectors.toList()); // Collect into a single list

        // Output the phone numbers
        System.out.println("Phone Numbers: " + phoneNumbers);
    }
}
Q4 : 
String s1 = "hello";
String s2 = new String("hello");
String s3 = "hello";
String s4 = s2 ;

System.out.println(s1 == s2);
System.out.println(s1.equals(s2));
System.out.println(s1 == s3);
System.out.println(s1.equals(s3));
System.out.println(s4 == s1);

false
true
true
true
false
