set 

1]EnumSet
 it will never throw ConcurrentModificationException.
 Null elements are not permitted.
 Set<MyEnum> s = Collections.synchronizedSet(EnumSet.noneOf(MyEnum.class));

EnumSet is an abstract class and it provides two concrete implementations, java.util.RegularEnumSet and java.util.JumboEnumSet. 
The main difference between RegularEnumSet and 
JumboEnumSet is that the former uses a long variable to store elements while later uses a long[] to store its element. 

Since RegularEnumSet uses a long variable, which is a 64-bit data type, it can only hold that much of an element. 

That's why when an empty EnumSet is created using EnumSet.noneOf() method, it chooses RegularEnumSet 
if the key universe (number of enum instances in Key Enum) 
is less than or equal to 64 and JumboEnumSet if the key universe is more than 64.

2]CopyOnWriteArraySet / ConcurrentHashSet
  ==========================================
https://javagoal.com/java-copyonwritearrayset/

3]sortedSet vs NavigableSet 
----------------------------
Methods lower(E), return elements respectively less than
floor(E),  less than or equal
ceiling(E), , greater than or equal
higher(E)  greater than a given element.

return elements respectively less than, less than or equal, greater than or equal, and 
greater than a given element, returning null if there is no such element.

A SortedSet extended with navigation methods reporting closest matches for given search targets.

java 10 
static <E> Set<E> copyOf​(Collection<? extends E> coll)

java 9 
 of()

java 8 
default Spliterator<E> spliterator()

others
---------
SortedSet<E>	headSet​(E toElement)	
Returns a view of the portion of this set whose elements are strictly less than toElement.
NavigableSet<E>	headSet​(E toElement, boolean inclusive)	
Returns a view of the portion of this set whose elements are less than (or equal to, if inclusive is true) toElement.

SortedSet<E>	tailSet​(E fromElement)	
Returns a view of the portion of this set whose elements are greater than or equal to fromElement.
NavigableSet<E>	tailSet​(E fromElement, boolean inclusive)	
Returns a view of the portion of this set whose elements are greater than (or equal to, if inclusive is true) fromElement.

3] concurrentSkipListSet
------------------------------
ConcurrentSkipListSet is a thread-safe, concurrent alternative to TreeSet in Java. 
It is particularly useful when you need a sorted set that can be accessed and modified by multiple threads simultaneously without causing issues.
Here are the key scenarios where using ConcurrentSkipListSet is beneficial:
Concurrent Access:
When multiple threads need to read, add, or remove elements from a sorted set concurrently, 
ConcurrentSkipListSet ensures thread safety without requiring explicit synchronization.

Sorted Data:
If you need to maintain elements in sorted order , 
while allowing concurrent operations, this set provides the necessary functionality.

Navigable Operations:
It supports navigable set operations like floor, ceiling, higher, and lower, enabling efficient searching and retrieval of elements based on their order.

High Concurrency:
It is designed for high concurrency and avoids contention between threads, unlike synchronized collections like TreeSet. 
Scalability:
It provides better scalability compared to synchronized collections, as it uses a lock-free algorithm based on skip lists.
However, there are some considerations to keep in mind:
Performance:
While it offers good performance for concurrent operations, it might be slightly slower than TreeSet in single-threaded scenarios due to the overhead of maintaining concurrency.

Weakly Consistent Iterators:
Iterators and spliterators returned by ConcurrentSkipListSet are weakly consistent, 
meaning they might not reflect all changes made to the set during iteration.

Size Operation:
The size() method is not a constant-time operation and requires traversal of the elements, which can be inaccurate if the set is modified concurrently.

Bulk Operations:
Bulk operations like addAll, removeAll, and retainAll are not guaranteed to be performed atomically. 

Null Elements:
This class does not permit the use of null elements. 
====================================================
ConcurrentSkipListSet()	
Constructs a new, empty set that orders its elements according to their natural ordering.

ConcurrentSkipListSet(Collection<? extends E> c)	
Constructs a new set containing the elements in the specified collection, that orders its elements according to their natural ordering.

ConcurrentSkipListSet(Comparator<? super E> comparator)	
Constructs a new, empty set that orders its elements according to the specified comparator.

ConcurrentSkipListSet(SortedSet<E> s)	
Constructs a new set containing the same elements and using the same ordering as the specified sorted set.

null - x
---------------------------------------------------
private final ConcurrentNavigableMap<E,Object> m;
public ConcurrentSkipListSet() {
        m = new ConcurrentSkipListMap<E,Object>();
}


A scalable concurrent NavigableSet implementation based on a ConcurrentSkipListMap. 
The elements of the set are kept sorted according to their natural 
ordering, or by a Comparator provided at set creation time, depending on which constructor is used.


------------------------------------------------
