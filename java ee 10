1.
Java Enterprise Edition (Java EE, formerly J2EE) has long been the standard for building 
enterprise-grade applications, governed by the Java Community Process (JCP) and managed by Oracle. 
Java EE provided the core libraries for web technologies, including Servlets, JSP, and EJB, all under the javax namespace.

On September 12, 2017, Oracle announced its decision to transfer Java EE to the Eclipse Foundation. 
However, the Eclipse Foundation and Oracle could not reach an agreement on the use of the 
javax namespace and Java trademarks, as Oracle retained ownership of the "Java" trademark. 
As a result, the platform was renamed from Java EE to Jakarta EE.

Starting with Jakarta EE 9.x, all existing libraries in the javax package have been renamed to the jakarta package. 
This change requires all Java EE-based libraries, including Servlets, to transition 
from the javax namespace to the jakarta namespace.

This is a significant shift, as not only your application but also all its dependencies must be upgraded to accommodate \
this namespace change.

  2] steps to migrate java ee 7 to java ee 10 .
how-to-migrate-from-java-ee-to-jakarta-ee-tips-and-best-practices-f19530c3bb1d
https://medium.com/@AlexanderObregon/how-to-migrate-from-java-ee-to-jakarta-ee-tips-and-best-practices-f19530c3bb1d

2.1 ) The most significant change is the shift in the namespace from javax.* to jakarta.*.
2.2 ) Update Your Dependencies
Updating dependencies is a critical step in migrating to Jakarta EE as it ensures that your application 
utilizes the latest libraries, which are compliant with the new jakarta.* namespace. This process involves 
replacing all the Java EE dependencies 
with their respective Jakarta EE counterparts in your project’s build configuration files, such as Maven or Gradle.

For Maven projects, modify the pom.xml to include the Jakarta EE libraries. 
Here’s how you can update the dependencies in your Maven configuration:

<dependency>
    <groupId>jakarta.platform</groupId>
    <artifactId>jakarta.jakartaee-api</artifactId>
    <version>9.1.0</version>
    <scope>provided</scope>
</dependency>

----------------------------------------
It’s important to review all project dependencies for any indirect usage of old Java EE APIs and update them accordingly. 
This might require checking third-party libraries or 
frameworks that are being used in your project to ensure they have been updated to support Jakarta EE.

2.3)
Refactor Your Code
Refactoring your code to use the new jakarta.* namespace is perhaps the most labor-intensive part of the migration. 
This step involves updating import statements and fully-qualified class names throughout your codebase.

Manual Refactoring: This can be done manually but is only recommended for smaller projects 
due to its error-prone nature. You would need to search and replace all occurrences of javax.* with jakarta.* in your source files.
Automated Migration Tools: For larger codebases, consider using an automated migration tool 
to streamline the process. The Eclipse Transformer, for example, 
is a comprehensive tool designed for this purpose. It can be executed as follows:
===================================================
https://medium.com/@AlexanderObregon/how-to-migrate-from-java-ee-to-jakarta-ee-tips-and-best-practices-f19530c3bb1d
