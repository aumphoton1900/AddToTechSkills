1.
https://codingharbour.com/apache-kafka/what-is-a-consumer-group-in-kafka/

In the topic post, I also mentioned that records remain in the topic even after being consumed. 
This allows multiple consumers to consume the same message, but it also allows one more thing: 
the same consumer can re-consume the records it already read, by simply rewinding its consumer offset.
This is very useful when you e.g. had a bug in your consumer and want to re-read the records after fixing the bug.

https://codingharbour.com/apache-kafka/how-to-create-kafka-consumer-in-java/
1]
consumer.subscribe(Collections.singleton("java_topic"));
while (true) {
    ConsumerRecords<String, String> records = consumer.poll(Duration.ofMillis(100));
    for (ConsumerRecord<String, String> record : records) {
        System.out.println("Message received: " + record.value());
    }
    consumer.commitAsync();
}

2.kafka 
=========

b. Kafka Consumers
i. Offsets
ZooKeeper is the default storage engine, for consumer offsets, in Kafka’s 0.9.1 release. 
However, all information about how many messages Kafka consumer consumes by each consumer is stored in ZooKeeper.

ii. Registry
Consumers in Kafka also have their own registry as in the case of Kafka Brokers. 
However, the same rules apply to it, ie. as ephemeral zNode, 
it’s destroyed once the consumer goes down and the registration process is made automatically by the consumer.




