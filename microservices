1. Microservices Design pattern
   1. Database per service pattern
      Dedicated database for each service:

2. 12 factor app : 

3. need for microservice design pattern 
 -  The Need for Microservices Design Patterns

 Service orchestration: Ensuring that multiple, 
independent services communicate seamlessly to execute complex business processes. 
Fault tolerance: In a distributed system, a failure in one service shouldn’t lead to a system-wide collapse. 
Data consistency: Unlike monolithic systems where you can rely on ACID transactions in a single database,
microservices often have their own databases, making transactional consistency a big concern. 
Service discoverability: How services locate each other in a dynamically scaling environment.

4. SOA vs Microservices 

5. client side load balancing
Spring Cloud Ribbon is a Netflix-contributed library that provides several algorithmic options out of the box, 
making it easier to implement client-side load balancing in a Spring Cloud-based microservices application.

In Ribbon, the client-side load balancing is performed using a component called RestTemplate. 
This component is marked as deprecated since Spring 5, but Ribbon still uses it. 
To create a RestTemplate bean, you need to annotate it with @LoadBalanced to integrate it with Ribbon:

@Bean
@LoadBalanced
public RestTemplate restTemplate() {
    return new RestTemplate();
}
https://medium.com/@AlexanderObregon/exploring-client-side-load-balancing-with-spring-cloud-ribbon-59bf46af9b73

============================
microservice transaction management - distributed tx mgmt 
1.  Saga Pattern Example

Implementing the Saga pattern in Spring involves using an event-driven approach. 
Here’s a basic example using simple application events:

import org.springframework.context.ApplicationEventPublisher;
import org.springframework.stereotype.Service;

@Service
public class OrderService {

    private final ApplicationEventPublisher publisher;

    public OrderService(ApplicationEventPublisher publisher) {
        this.publisher = publisher;
    }

    public void createOrder(Order order) {
        // publish an event to start the Saga
        publisher.publishEvent(new OrderCreatedEvent(this, order));
    }
}
========================================
Configuring Spring Boot with JTA
Spring Boot provides excellent out-of-the-box support for JTA. 
It does this by auto-configuring either Atomikos or Bitronix, two popular open-source JTA implementations. 
To get started, you simply need to include the necessary dependencies in your Maven or Gradle project.

Maven
For Maven, include the following dependencies:

<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-data-jpa</artifactId>
</dependency>
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-jta-atomikos</artifactId>
</dependency>
==============================================
